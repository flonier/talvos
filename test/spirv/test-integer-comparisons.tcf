# Test integer comparison instructions.
# Fills buffers A and B with specific values and then executes this snippet:
#   if (A[i] <OP> B[i])
#     OUTPUT[i] = 1;

MODULE test-integer-comparisons.spvasm
ENTRY test_integer_comparisons

BUFFER A 52 DATA INT32
0 0 0 1 -1
 42  42  7  42
-42 -42 -7 -42

BUFFER B 52 DATA INT32
0 1 -1 0 0
 42  7  42 -7
-42 -7 -42 42

BUFFER eq 52 FILL INT32 0
BUFFER neq 52 FILL INT32 0
BUFFER ugt 52 FILL INT32 0
BUFFER sgt 52 FILL INT32 0
BUFFER ugte 52 FILL INT32 0
BUFFER sgte 52 FILL INT32 0
BUFFER ult 52 FILL INT32 0
BUFFER slt 52 FILL INT32 0
BUFFER ulte 52 FILL INT32 0
BUFFER slte 52 FILL INT32 0

DESCRIPTOR_SET 0 0 0 A
DESCRIPTOR_SET 0 1 0 B

DESCRIPTOR_SET 0 2 0 eq
DESCRIPTOR_SET 0 3 0 neq
DESCRIPTOR_SET 0 4 0 ugt
DESCRIPTOR_SET 0 5 0 sgt
DESCRIPTOR_SET 0 6 0 ugte
DESCRIPTOR_SET 0 7 0 sgte
DESCRIPTOR_SET 0 8 0 ult
DESCRIPTOR_SET 0 9 0 slt
DESCRIPTOR_SET 0 10 0 ulte
DESCRIPTOR_SET 0 11 0 slte

DISPATCH 13 1 1

DUMP INT32 eq
DUMP INT32 neq
DUMP INT32 ugt
DUMP INT32 sgt
DUMP INT32 ugte
DUMP INT32 sgte
DUMP INT32 ult
DUMP INT32 slt
DUMP INT32 ulte
DUMP INT32 slte

# CHECK: Buffer 'eq' (52 bytes):
# CHECK:   eq[0] = 1
# CHECK:   eq[1] = 0
# CHECK:   eq[2] = 0
# CHECK:   eq[3] = 0
# CHECK:   eq[4] = 0
# CHECK:   eq[5] = 1
# CHECK:   eq[6] = 0
# CHECK:   eq[7] = 0
# CHECK:   eq[8] = 0
# CHECK:   eq[9] = 1
# CHECK:   eq[10] = 0
# CHECK:   eq[11] = 0
# CHECK:   eq[12] = 0

# CHECK: Buffer 'neq' (52 bytes):
# CHECK:   neq[0] = 0
# CHECK:   neq[1] = 1
# CHECK:   neq[2] = 1
# CHECK:   neq[3] = 1
# CHECK:   neq[4] = 1
# CHECK:   neq[5] = 0
# CHECK:   neq[6] = 1
# CHECK:   neq[7] = 1
# CHECK:   neq[8] = 1
# CHECK:   neq[9] = 0
# CHECK:   neq[10] = 1
# CHECK:   neq[11] = 1
# CHECK:   neq[12] = 1

# CHECK: Buffer 'ugt' (52 bytes):
# CHECK:   ugt[0] = 0
# CHECK:   ugt[1] = 0
# CHECK:   ugt[2] = 0
# CHECK:   ugt[3] = 1
# CHECK:   ugt[4] = 1
# CHECK:   ugt[5] = 0
# CHECK:   ugt[6] = 1
# CHECK:   ugt[7] = 0
# CHECK:   ugt[8] = 0
# CHECK:   ugt[9] = 0
# CHECK:   ugt[10] = 0
# CHECK:   ugt[11] = 1
# CHECK:   ugt[12] = 1

# CHECK: Buffer 'sgt' (52 bytes):
# CHECK:   sgt[0] = 0
# CHECK:   sgt[1] = 0
# CHECK:   sgt[2] = 1
# CHECK:   sgt[3] = 1
# CHECK:   sgt[4] = 0
# CHECK:   sgt[5] = 0
# CHECK:   sgt[6] = 1
# CHECK:   sgt[7] = 0
# CHECK:   sgt[8] = 1
# CHECK:   sgt[9] = 0
# CHECK:   sgt[10] = 0
# CHECK:   sgt[11] = 1
# CHECK:   sgt[12] = 0

# CHECK: Buffer 'ugte' (52 bytes):
# CHECK:   ugte[0] = 1
# CHECK:   ugte[1] = 0
# CHECK:   ugte[2] = 0
# CHECK:   ugte[3] = 1
# CHECK:   ugte[4] = 1
# CHECK:   ugte[5] = 1
# CHECK:   ugte[6] = 1
# CHECK:   ugte[7] = 0
# CHECK:   ugte[8] = 0
# CHECK:   ugte[9] = 1
# CHECK:   ugte[10] = 0
# CHECK:   ugte[11] = 1
# CHECK:   ugte[12] = 1

# CHECK: Buffer 'sgte' (52 bytes):
# CHECK:   sgte[0] = 1
# CHECK:   sgte[1] = 0
# CHECK:   sgte[2] = 1
# CHECK:   sgte[3] = 1
# CHECK:   sgte[4] = 0
# CHECK:   sgte[5] = 1
# CHECK:   sgte[6] = 1
# CHECK:   sgte[7] = 0
# CHECK:   sgte[8] = 1
# CHECK:   sgte[9] = 1
# CHECK:   sgte[10] = 0
# CHECK:   sgte[11] = 1
# CHECK:   sgte[12] = 0

# CHECK: Buffer 'ult' (52 bytes):
# CHECK:   ult[0] = 0
# CHECK:   ult[1] = 1
# CHECK:   ult[2] = 1
# CHECK:   ult[3] = 0
# CHECK:   ult[4] = 0
# CHECK:   ult[5] = 0
# CHECK:   ult[6] = 0
# CHECK:   ult[7] = 1
# CHECK:   ult[8] = 1
# CHECK:   ult[9] = 0
# CHECK:   ult[10] = 1
# CHECK:   ult[11] = 0
# CHECK:   ult[12] = 0

# CHECK: Buffer 'slt' (52 bytes):
# CHECK:   slt[0] = 0
# CHECK:   slt[1] = 1
# CHECK:   slt[2] = 0
# CHECK:   slt[3] = 0
# CHECK:   slt[4] = 1
# CHECK:   slt[5] = 0
# CHECK:   slt[6] = 0
# CHECK:   slt[7] = 1
# CHECK:   slt[8] = 0
# CHECK:   slt[9] = 0
# CHECK:   slt[10] = 1
# CHECK:   slt[11] = 0
# CHECK:   slt[12] = 1

# CHECK: Buffer 'ulte' (52 bytes):
# CHECK:   ulte[0] = 1
# CHECK:   ulte[1] = 1
# CHECK:   ulte[2] = 1
# CHECK:   ulte[3] = 0
# CHECK:   ulte[4] = 0
# CHECK:   ulte[5] = 1
# CHECK:   ulte[6] = 0
# CHECK:   ulte[7] = 1
# CHECK:   ulte[8] = 1
# CHECK:   ulte[9] = 1
# CHECK:   ulte[10] = 1
# CHECK:   ulte[11] = 0
# CHECK:   ulte[12] = 0

# CHECK: Buffer 'slte' (52 bytes):
# CHECK:   slte[0] = 1
# CHECK:   slte[1] = 1
# CHECK:   slte[2] = 0
# CHECK:   slte[3] = 0
# CHECK:   slte[4] = 1
# CHECK:   slte[5] = 1
# CHECK:   slte[6] = 0
# CHECK:   slte[7] = 1
# CHECK:   slte[8] = 0
# CHECK:   slte[9] = 1
# CHECK:   slte[10] = 1
# CHECK:   slte[11] = 0
# CHECK:   slte[12] = 1

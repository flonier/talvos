# Performs several iterations of the Jacobi method (corresponding OpenCL
# kernel code below) on a trivial 2x2 matrix.
#
# kernel void jacobi(
#   const int norder,
#   global         float * xold,
#   global         float * xnew,
#   global         float * A,
#   global         float * b)
# {
#   const int row  = get_global_id(0);
#
#   float tmp = 0.f;
#   for (int col = 0; col < norder; col++)
#   {
#     if (row != col)
#       tmp += A[row*norder + col] * xold[col];
#   }
#
#   xnew[row] = (b[row] - tmp) / A[row*norder + row];
# }

MODULE jacobi.spvasm
ENTRY jacobi

BUFFER norder 4 DATA INT32 2

BUFFER x0 8 DATA FLOAT
1 1

BUFFER x1 8 DATA FLOAT
0 0

BUFFER A 16 DATA FLOAT
2 1
5 7

BUFFER b 8 DATA FLOAT
11 13

DESCRIPTOR_SET 0 0 0 norder
DESCRIPTOR_SET 0 3 0 A
DESCRIPTOR_SET 0 4 0 b

LOOP 15
  DESCRIPTOR_SET 0 1 0 x0
  DESCRIPTOR_SET 0 2 0 x1
  DISPATCH 2 1 1

  DESCRIPTOR_SET 0 1 0 x1
  DESCRIPTOR_SET 0 2 0 x0
  DISPATCH 2 1 1
ENDLOOP

DUMP FLOAT x0

# CHECK: Buffer 'x0' (8 bytes):
# CHECK:   x0[0] = 7.11111
# CHECK:   x0[1] = -3.22222

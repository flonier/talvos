# Test step command.
# Step through a simple invocation until it finishes.
# Step through an invocation that has a barrier up to the barrier.

MODULE ../misc/vecadd.spvasm
ENTRY vecadd

BUFFER a 64 SERIES INT32 0 1
BUFFER b 64 FILL   INT32 7
BUFFER c 64 FILL   INT32 0

DESCRIPTOR_SET 0 0 0 a
DESCRIPTOR_SET 0 1 0 b
DESCRIPTOR_SET 0 2 0 c

DISPATCH 16 1 1

# CHECK: = OpAccessChain
# CHECK: = OpLoad
# CHECK: = OpAccessChain
# CHECK: = OpLoad
# CHECK: = OpAccessChain
# CHECK: = OpLoad
# CHECK: = OpIAdd
# CHECK: = OpAccessChain
# CHECK: OpStore
# CHECK: OpReturn
# CHECK: <finished>
# CHECK: Invocation has finished.

DUMP INT32 c

# CHECK: Buffer 'c' (64 bytes):
# CHECK:   c[0] = 7
# CHECK:   c[1] = 8
# CHECK:   c[2] = 9
# CHECK:   c[3] = 10
# CHECK:   c[4] = 11
# CHECK:   c[5] = 12
# CHECK:   c[6] = 13
# CHECK:   c[7] = 14
# CHECK:   c[8] = 15
# CHECK:   c[9] = 16
# CHECK:   c[10] = 17
# CHECK:   c[11] = 18
# CHECK:   c[12] = 19
# CHECK:   c[13] = 20
# CHECK:   c[14] = 21
# CHECK:   c[15] = 22




MODULE ../misc/reduce.spvasm
ENTRY reduce

BUFFER n      4   DATA   UINT32 64
BUFFER data   256 SERIES UINT32 0 1
BUFFER result 32  FILL   UINT32 0

DESCRIPTOR_SET 0 0 0 n
DESCRIPTOR_SET 0 1 0 data
DESCRIPTOR_SET 0 2 0 result

DISPATCH 8 1 1

# CHECK: = OpAccessChain
# CHECK: = OpLoad
# CHECK: = OpAccessChain
# CHECK: = OpLoad
# CHECK: = OpBitwiseAnd
# CHECK: = OpCompositeExtract
# CHECK: = OpAccessChain
# CHECK: = OpLoad
# CHECK: = OpAccessChain
# CHECK: = OpLoad
# CHECK: = OpAccessChain
# CHECK: OpStore
# CHECK: = OpShiftRightLogical
# CHECK: = OpIEqual
# CHECK: = OpLogicalNot
# CHECK: OpSelectionMerge
# CHECK: OpBranchConditional
# CHECK: OpBranch
# CHECK: = OpPhi
# CHECK: OpControlBarrier
# CHECK: <barrier>
# CHECK: Invocation is at a barrier.

DUMP UINT32 result

# CHECK: Buffer 'result' (32 bytes):
# CHECK:   result[0] = 28
# CHECK:   result[1] = 92
# CHECK:   result[2] = 156
# CHECK:   result[3] = 220
# CHECK:   result[4] = 284
# CHECK:   result[5] = 348
# CHECK:   result[6] = 412
# CHECK:   result[7] = 476
